pipeline {
    agent any
    environment {
        DS_VERSION = "0.4.1"
        DS_RELEASE_URL = "https://github.com/mozilla/DeepSpeech/releases/download/v${DS_VERSION}"
        BASE_IMAGE = "tensorflow/tensorflow:1.13.1-gpu-py3"
        IMAGE_NAME = "dijksterhuis/cleverspeech"

        BUILD_TAG = "build"
    }

    stages {

        stage('Clean up before we start.') {
            steps {
                sh "docker image prune -f"
                sh "docker container prune -f"
            }
        }

        stage('Checkout build branch.') {
            steps {
                git branch: "${BUILD_TAG}", credentialsId: 'git-mr', url: 'https://github.com/dijksterhuis/cleverSpeech.git'
            }
        }

        stage("Download big DeepSpeech files."){
            steps {
                script {
                    sh "rm -rf ./*checkpoint* ./*models*"
                    sh "wget --no-verbose ${DS_RELEASE_URL}/deepspeech-${DS_VERSION}-checkpoint.tar.gz"
                    sh "wget --no-verbose ${DS_RELEASE_URL}/deepspeech-${DS_VERSION}-models.tar.gz"
                }
            }
        }

        stage("Extract big DeepSpeech files."){
            steps {
                script {
                    sh "tar xvfz ./deepspeech-${DS_VERSION}-checkpoint.tar.gz"
                    sh "rm -f ./deepspeech-${DS_VERSION}-checkpoint.tar.gz"

                    sh "tar xvfz ./deepspeech-${DS_VERSION}-models.tar.gz"
                    sh "rm -f ./deepspeech-${DS_VERSION}-models.tar.gz"


                }
            }
        }
        stage("Download, extract and process samples."){
            steps {
                script {
                    sh "./bin/attacks/create-samples-dir.sh"
                }
            }
        }

        stage("Build base image.") {
            steps {
                script {

                    sh """
                        docker pull ${BASE_IMAGE}

                        docker build \
                        -t ${IMAGE_NAME}:build \
                        -f ./Dockerfiles/build \
                        --force-rm \
                        --no-cache \
                        --build-arg DS_VERSION=${DS_VERSION} \
                        .

                    """
                }
            }
        }

        stage("Push images.") {
            steps {
                script {
                    withDockerRegistry([ credentialsId: "dhub-mr", url: "" ]) {
                        sh "docker push ${IMAGE_NAME}:${BUILD_TAG}"
                    }
                }
            }
        }
    }
    post  {
        always {
            sh "rm -rf ./*checkpoint* ./*models* ./*samples*/"
            sh "docker image prune -f"
            sh "docker container prune -f"
            sh "docker image rm ${BASE_IMAGE}"
        }
    }
}